---
# Install MySQL server
- name: Install MySQL server
  ansible.builtin.apt:
    name: mysql-server
    state: present
    update_cache: yes

# Install PyMySQL for MySQL connectivity
- name: Install PyMySQL
  ansible.builtin.apt:
    name: python3-pymysql
    state: present

# Ensure MySQL service is started and enabled
- name: Ensure MySQL service is running
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: true

- name: Wait for MySQL to be ready
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: 3306
    delay: 5
    timeout: 30
    state: started

# Create override configuration for MySQL to bind to 0.0.0.0
- name: Create MySQL override configuration
  ansible.builtin.copy:
    dest: /etc/mysql/mysql.conf.d/override.cnf
    content: |
      [mysqld]
      bind-address = 0.0.0.0
      log-bin = /var/log/mysql/mysql-bin.log
      relay-log = /var/log/mysql/mysql-relay.log
      replicate-do-db = {{ mysql_database }}
      server-id = {{ node_id }}
  notify: Restart MySQL

# Create MySQL database
- name: MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

# Create MySQL user for the web application
- name: MySQL user
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock

# Install MySQL exporter
- name: Install MySQL exporter
  ansible.builtin.apt:
    name: prometheus-mysqld-exporter
    state: present
    update_cache: yes

# Create MySQL user for the exporter
- name: Create MySQL user for exporter
  community.mysql.mysql_user:
    name: mysql_exporter
    password: "{{ mysql_exporter_password }}"
    priv: "*.*:PROCESS,REPLICATION CLIENT"
    login_unix_socket: /var/run/mysqld/mysqld.sock

# Configure MySQL exporter credentials
- name: Configure MySQL exporter credentials
  ansible.builtin.copy:
    content: |
      [client]
      user=mysql_exporter
      password={{ mysql_exporter_password }}
    dest: /var/lib/prometheus/.my.cnf
    owner: prometheus
    group: prometheus
    mode: "0600"
  notify: Restart MySQL Exporter
  no_log: true

# Ensure /home/backup/mysql directory exists
- name: Ensure /home/backup/mysql directory exists
  ansible.builtin.file:
    path: /home/backup/mysql
    state: directory
    owner: backup
    group: backup
    mode: '0755'

# Create MySQL backup user
- name: Create MySQL backup user
  community.mysql.mysql_user:
    name: backup
    host: '%'
    password: "{{ mysql_backup_password }}"
    priv: "agama.*:LOCK TABLES,SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
  become: true
  become_user: root
  no_log: true

# Create MySQL client configuration file for backup user
- name: Create MySQL client configuration file for backup user
  ansible.builtin.copy:
    dest: /home/backup/.my.cnf
    content: |
      [client]
      user=backup
      password={{ mysql_backup_password }}
      [mysqldump]
      no_tablespaces
    owner: backup
    group: backup
    mode: '0600'
  no_log: true

# Ensure /home/backup/mysql directory exists
- name: Ensure /home/backup/mysql directory exists
  ansible.builtin.file:
    path: /home/backup/mysql
    state: directory
    owner: backup
    group: backup
    mode: '0755'

# Create Cron job for MySQL backups
- name: Create Cron job for MySQL backups
  ansible.builtin.copy:
    content: |
      {% if inventory_hostname == mysql_backup_host %}
      PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
      {{ mysql_backup_schedule }} backup mysqldump agama > /home/backup/mysql/agama.sql
      12 0 * * 0  backup  duplicity --no-encryption full /home/backup/mysql/ rsync://andriikuiava@{{ backup_domain }}/mysql
      12 0 * * 1-6  backup  duplicity --no-encryption incremental /home/backup/mysql/ rsync://andriikuiava@{{ backup_domain }}/mysql
      {% endif %}
    dest: /etc/cron.d/mysql-backup
    owner: root
    group: root
    mode: '0644'
  notify: Restart Cron

# Create MySQL replication user
- name: Create MySQL replication user
  community.mysql.mysql_user:
    name: replication
    login_unix_socket: /var/run/mysqld/mysqld.sock
    password: "{{ replication_password }}"
    priv: '*.*:REPLICATION SLAVE'
    host: '%'
    state: present
  register: mysql_replication_user

# Set MySQL read_only mode dynamically
- name: Set MySQL read_only mode dynamically
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  delegate_to: "{{ inventory_hostname }}"
  when: inventory_hostname in groups['db_servers']
  notify:
    - Reset MySQL source
    - Reset MySQL replica

- name: Add CNAME for MySQL instances
  community.general.nsupdate:
    server: "{{ hostvars[groups['dns_primary'][0]]['ansible_default_ipv4']['address'] }}"
    key_name: "nsupdate.key"
    key_algorithm: "hmac-sha256"
    key_secret: "{{ nsupdate_key_secret }}"
    zone: "{{ domain_name }}"
    record: "{{ item.name }}.{{ domain_name }}."
    type: CNAME
    value: "{{ item.target }}.{{ domain_name }}."
  loop:
    - { name: "db-1", target: "andriikuiava-1" }
    - { name: "db-2", target: "andriikuiava-2" }

## Create override configuration for MySQL exporter
#- name: Restart MySQL exporter if credentials change
#  ansible.builtin.systemd:
#    name: prometheus-mysqld-exporter
#    state: restarted
#  notify: Restart MySQL Exporter