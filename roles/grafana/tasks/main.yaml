---
# Create required directories
- name: Create required directories for Grafana provisioning
  ansible.builtin.file:
    path: "/opt/grafana/provisioning/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  loop:
    - dashboards
    - datasources

# Copy Grafana configuration file
- name: Copy grafana.ini configuration
  ansible.builtin.template:
    src: grafana.ini.j2
    dest: /opt/grafana/grafana.ini
    owner: root
    group: root
    mode: "0644"

# Copy provisioning files
- name: Copy dashboard provisioning configuration
  ansible.builtin.copy:
    src: dashboards.yaml
    dest: /opt/grafana/provisioning/dashboards/default.yaml
    owner: root
    group: root
    mode: "0644"

- name: Copy datasource provisioning configuration
  ansible.builtin.template:
    src: datasource.yaml.j2
    dest: /opt/grafana/provisioning/datasources/default.yaml
    owner: root
    group: root
    mode: "0644"

- name: Copy dashboards JSON files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/opt/grafana/provisioning/dashboards/{{ item }}"
    owner: root
    group: root
    mode: "0644"
  loop:
    - backups.json
    - main.json
    - mysql.json
    - syslog.json

# Start Grafana container
- name: Ensure Grafana container is running
  community.docker.docker_container:
    name: grafana
    image: grafana/grafana
    state: started
    restart_policy: always
    ports:
      - "{{ grafana_port }}:3000"
    volumes:
      - /opt/grafana:/etc/grafana
  notify: Restart Grafana

- name: Add CNAME for Grafana
  community.general.nsupdate:
    server: "{{ hostvars[groups['dns_primary'][0]]['ansible_default_ipv4']['address'] }}"
    key_name: "nsupdate.key"
    key_algorithm: "hmac-sha256"
    key_secret: "{{ nsupdate_key_secret }}"
    zone: "{{ domain_name }}"
    record: "grafana.{{ domain_name }}."
    type: CNAME
    value: "{{ hostvars[groups['grafana_servers'][0]]['ansible_hostname'] }}"
